<?xml version="1.0" encoding="UTF-8"?>
<!--
    Application context definition for PetClinic Datasource.
-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/jdbc
         http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
         http://www.springframework.org/schema/jee
         http://www.springframework.org/schema/jee/spring-jee.xsd">

    <!-- ========================= DATASOURCE DEFINITION ========================= -->

    <!-- Configurer that replaces ${...} placeholders with values from a properties file -->
    <!-- (in this case, JDBC-related settings for the dataSource definition below) -->
    <!-- 
    <context:property-placeholder order="1" location="classpath:conf/data-access.properties" system-properties-mode="OVERRIDE"/>
    <context:property-placeholder order="2" location="classpath:system/data-access.properties" system-properties-mode="OVERRIDE" ignore-unresolvable="false"/>
    -->
    <bean class="com.lumens.sysdb.config.DBPropertyPlaceHolderConfigurer">
        <property name="location">
            <value>classpath:system/data-access.properties</value>
        </property>
    </bean>
    <!-- DataSource configuration for the tomcat jdbc connection pool 
    See here for more details on commons-dbcp versus tomcat-jdbc: 
    http://blog.ippon.fr/2013/03/13/improving-the-performance-of-the-spring-petclinic-sample-application-part-3-of-5/-->
    <bean id="projectDAO" class="com.lumens.sysdb.dao.ProjectDAO">
        <property name="sqlManager" ref="sqlManager"/>
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
        <property name="transactionTemplate" ref="transactionTemplate"/>
    </bean>
    <bean id="elementExceptionDAO" class="com.lumens.sysdb.dao.ElementExceptionDAO">
        <property name="sqlManager" ref="sqlManager"/>
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
        <property name="transactionTemplate" ref="transactionTemplate"/>
    </bean>
    <bean id="inputLogDAO" class="com.lumens.sysdb.dao.InOutLogDAO">
        <property name="sqlManager" ref="sqlManager"/>
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
        <property name="transactionTemplate" ref="transactionTemplate"/>
    </bean>
    <bean id="JobDAO" class="com.lumens.sysdb.dao.JobDAO">
        <property name="sqlManager" ref="sqlManager"/>
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
        <property name="transactionTemplate" ref="transactionTemplate"/>
    </bean>
    <bean id="RelationDAO" class="com.lumens.sysdb.dao.JobProjectRelationDAO">
        <property name="sqlManager" ref="sqlManager"/>
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
        <property name="transactionTemplate" ref="transactionTemplate"/>
    </bean>
    <bean id="sqlManager" class="com.lumens.sysdb.SQLManager">
        <constructor-arg value="system/daoSQL.xml"/>
    </bean>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- Create instance of transaction template for programmatic transaction manipulation -->
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"></property>
    </bean>
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- the DataSource (parameterized for configuration via a PropertyPlaceHolderConfigurer) -->
    <bean id="dataSource" destroy-method="close" class="org.apache.tomcat.jdbc.pool.DataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="defaultAutoCommit" value="${jdbc.defaultAutoCommit}"/>
        <property name="jdbcInterceptors" value="${jdbc.jdbcInterceptors}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <property name="maxWait" value="${jdbc.maxWait}"/>
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <property name="removeAbandoned" value="${jdbc.removeAbandoned}"/>
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/>
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
        <property name="testOnReturn" value="${jdbc.testOnReturn}"/>
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
        <property name="validationInterval" value="${jdbc.validationInterval}"/>
        <property name="validationQuery" value="${jdbc.validationQuery}"/>
    </bean>
</beans>